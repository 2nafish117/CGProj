#include "OpenGLDependencies.h"
#include "Util.h"
#include "Renderer.h"
#include "VertexBuffer.h"
#include "IndexBuffer.h"
#include "VertexArray.h"
#include "VertexBufferLayout.h"
#include "ShaderProgram.h"
#include "Texture.h"
#include "Camera.h"

#include "glm/glm.hpp"
#include "glm/gtc/matrix_transform.hpp"
#include "glm/gtc/type_ptr.hpp"

int main(void)
{
	unsigned int mScreenWidth = 960;
	unsigned int mScreenHeight = 540;
	GLFWwindow* mWindow;
	std::string mGameName = "Untitled Game Game";

	/* Initialize the library */
	if (!glfwInit())
	{
		std::cerr << "glfwInit failed\n";
		return EXIT_FAILURE;
	}

	/* Create a windowed mode window and its OpenGL context */
	mWindow = glfwCreateWindow(mScreenWidth, mScreenHeight, mGameName.c_str(), NULL, NULL);
	if (!mWindow)
	{
		std::cerr << "glfwCreateWindow failed\n";
		return EXIT_FAILURE;
	}

	/* Make the window's context current */
	glfwMakeContextCurrent(mWindow);

	glfwSetInputMode(mWindow, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

	if (GLenum err = glewInit())
	{
		std::cerr << "glewInit failed with error code " << err << "\n";
		return EXIT_FAILURE;
	}
	// start of empty scope
	{
		// Unfinalised stuff
		float groundVertex[4 * 5] = {
			// position					// texture
			 100.0f, -5.0f,  100.0f,	50.0f, 50.0f,	// 0
			 100.0f, -5.0f, -100.0f,	50.0f, 0.0f,	// 1
			-100.0f, -5.0f, -100.0f,	0.0f, 0.0f,		// 2
			-100.0f, -5.0f,  100.0f,	0.0f, 50.0f		// 3
		};

		unsigned int groundIndex[2 * 3] = {
			0, 1, 2, 
			0, 2, 3
		};

		float memeVertex[4 * 5] = {
			// position					// texture
			 15.0f,  15.0f, 20.0f,		1.0f, 1.0f,		// 0
			 15.0f, -15.0f, 20.0f,		1.0f, 0.0f,		// 1
			-15.0f, -15.0f, 20.0f,		0.0f, 0.0f,		// 2
			-15.0f,  15.0f, 20.0f,		0.0f, 1.0f		// 3
		};

		unsigned int memeIndex[2 * 3] = {
			0, 1, 2,
			0, 2, 3
		};

		// cube
		float cubeVertex[14 * 5] = {
			// positions		// tex coord
			-0.5f, -0.5f, -0.5f,	0.25f, 0.333f,	// 0	// 0
			 0.5f, -0.5f, -0.5f,	0.5f,  0.333f,	// 1	// 1
			 0.5f,  0.5f, -0.5f,	0.5f,  0.666f,	// 2	// 2
			-0.5f,  0.5f, -0.5f,	0.25f, 0.666f,	// 3	// 3
			-0.5f, -0.5f,  0.5f,	0.25f, 0.0f,	// 4	// 4
			 0.5f, -0.5f,  0.5f,	0.5f,  0.0f,	// 5	// 5
			 0.5f,  0.5f,  0.5f,	0.5f,  1.0f,	// 6	// 6
			-0.5f,  0.5f,  0.5f,	0.25f, 1.0f,	// 7	// 7
			-0.5f, -0.5f,  0.5f,	0.0f,  0.333f,	// 4'	// 8
			-0.5f, -0.5f,  0.5f,	1.0f,  0.333f,	// 4''	// 9
			 0.5f, -0.5f,  0.5f,	0.75f, 0.333f,	// 5'	// 10
			 0.5f,  0.5f,  0.5f,	0.75f, 0.666f,	// 6'	// 11
			-0.5f,  0.5f,  0.5f,	0.0f,  0.666f,	// 7'	// 12
			-0.5f,  0.5f,  0.5f,	1.0f,  0.666f,	// 7''	// 13
		};

		unsigned int cubeIndex[6 * 6] = {
			0, 1, 2,	0, 3, 2,
			0, 1, 5,	0, 5, 4,
			2, 3, 7,	2, 6, 7,
			1, 2, 10,	2, 10, 11,
			0, 3, 12,	0, 8, 12,
			9, 10, 11,	9, 13, 11
		};

		std::vector<glm::vec3> cubes;
		cubes.reserve(500);
		for (int i = 0; i < 500; ++i)
		{
			float x = utl::random(-50, 50);
			float y = utl::random(0, 50);
			float z = utl::random(-50, 50);

			cubes.push_back(glm::vec3(x, y, z));
		}

		Renderer mRenderer;
		mRenderer.enable(GL_DEPTH_TEST);
		mRenderer.enable(GL_BLEND);
		mRenderer.setBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

		// cube stuff
		VertexArray cubeVa;
		VertexBuffer cubeVb(cubeVertex, 14 * 5 * sizeof(float));
		VertexBufferLayout layout;
		layout.push<float>(3); // positions
		layout.push<float>(2); // tex coord
		cubeVa.addBuffer(cubeVb, layout);
		IndexBuffer cubeIb(cubeIndex, 6 * 6);
		ShaderProgram cubeShader("res/shaders/squareVertexShader.shader", "res/shaders/squareFragmentShader.shader");

		Texture wallTexture("res/textures/brick_texture.jpg");
		// wallTexture.generateMipmap();
		wallTexture.bind(0);
		cubeShader.setUniform1i("uTexture", 0);

		// ground stuff
		VertexArray groundVa;
		VertexBuffer groundVb(groundVertex, 4 * 5 * sizeof(float));
		groundVa.addBuffer(groundVb, layout);
		IndexBuffer groundIb(groundIndex, 2 * 3);
		ShaderProgram groundShader("res/shaders/squareVertexShader.shader", "res/shaders/squareFragmentShader.shader");

		Texture grassTexture("res/textures/grass_texture.jpg", GL_MIRRORED_REPEAT);
		// grassTexture.generateMipmap();
		grassTexture.bind(0);
		groundShader.setUniform1i("uTexture", 0);

		// meme stuff
		VertexArray memeVa;
		VertexBuffer memeVb(memeVertex, 4 * 5 * sizeof(float));
		memeVa.addBuffer(memeVb, layout);
		IndexBuffer memeIb(memeIndex, 2 * 3);
		ShaderProgram memeShader("res/shaders/squareVertexShader.shader", "res/shaders/squareFragmentShader.shader");

		Texture memeTexture("res/textures/gnome.jpg", GL_CLAMP_TO_BORDER);
		memeTexture.bind(0);
		memeShader.setUniform1i("uTexture", 0);

		// Camera settings
		const glm::vec3 pos = glm::vec3(0.0f, 0.0f, 0.0f);
		Camera camera(pos);
		auto scrollCallbackArgs = std::make_tuple(&camera, 0.0);

		glfwSetWindowUserPointer(mWindow, &scrollCallbackArgs);
		glfwSetScrollCallback(mWindow, Camera::handleMouseScrollEvent);
		
		glm::mat4 model = glm::scale(glm::mat4(1.0f), glm::vec3(0.5, 0.5, 0.5));
		glm::mat4 view = camera.getViewMatrix();
		glm::mat4 projection = camera.getProjectionMatrix();
		glm::mat4 MVP;

		float deltaTime = 0;
		float timeLastFrame = 0;
		float timeThisFrame = 0;
		/* Loop until the user closes the window */
		while (!glfwWindowShouldClose(mWindow))
		{
			mRenderer.clear();

			timeThisFrame = (float)glfwGetTime();
			deltaTime = timeThisFrame - timeLastFrame;
			timeLastFrame = timeThisFrame;

			{
				std::get<1>(scrollCallbackArgs) = deltaTime;
				// handle inputs
				if (glfwGetKey(mWindow, GLFW_KEY_ESCAPE) == GLFW_PRESS)
					glfwSetWindowShouldClose(mWindow, true);
				
				if (glfwGetKey(mWindow, GLFW_KEY_W) == GLFW_PRESS)
					camera.handleKeyboardInput(FRONT, true, deltaTime);
				if (glfwGetKey(mWindow, GLFW_KEY_S) == GLFW_PRESS)
					camera.handleKeyboardInput(BACK, true, deltaTime);
				if (glfwGetKey(mWindow, GLFW_KEY_A) == GLFW_PRESS)
					camera.handleKeyboardInput(LEFT, true, deltaTime);
				if (glfwGetKey(mWindow, GLFW_KEY_D) == GLFW_PRESS)
					camera.handleKeyboardInput(RIGHT, true, deltaTime);
				if (glfwGetKey(mWindow, GLFW_KEY_SPACE) == GLFW_PRESS)
					camera.handleKeyboardInput(SPRINT, true, deltaTime);

				double mouseXpos, mouseYpos;
				glfwGetCursorPos(mWindow, &mouseXpos, &mouseYpos);
				camera.handleMouseMoveInput(mouseXpos, mouseYpos, deltaTime);
				int leftButtonPressed = glfwGetMouseButton(mWindow, GLFW_MOUSE_BUTTON_LEFT);
				int rightButtonPressed = glfwGetMouseButton(mWindow, GLFW_MOUSE_BUTTON_LEFT);
				int middleButtonPressed = glfwGetMouseButton(mWindow, GLFW_MOUSE_BUTTON_LEFT);
				camera.handleMouseButtonInput(leftButtonPressed, rightButtonPressed, middleButtonPressed, deltaTime);
			}

			{
				// render stuff
				view = camera.getViewMatrix();
				projection = camera.getProjectionMatrix();

				for (int i = 0; i < cubes.size(); ++i)
				{
					model = glm::translate(glm::mat4(1.0f), cubes[i]);
					model = glm::scale(model, glm::vec3(0.5, 0.5, 0.5));
					// model = glm::rotate(model, timeThisFrame, glm::vec3(1.0f, 0.3f, 0.5f));
					MVP = projection * view * model;
					cubeShader.setUniformMatrix4fv("uMVP", glm::value_ptr(MVP));
					wallTexture.bind(0);
					mRenderer.draw(cubeVa, cubeIb, cubeShader);
				}

				MVP = projection * view * glm::mat4(1.0);

				memeShader.setUniformMatrix4fv("uMVP", glm::value_ptr(MVP));
				groundShader.setUniformMatrix4fv("uMVP", glm::value_ptr(MVP));


				grassTexture.bind(0);
				mRenderer.draw(groundVa, groundIb, groundShader);

				memeTexture.bind(0);
				mRenderer.draw(memeVa, memeIb, memeShader);

			}

			/* Swap front and back buffers */
			glfwSwapBuffers(mWindow);

			/* Poll for and process events */
			glfwPollEvents();
		}
	}
	
	glfwTerminate();

	return 0;
}